// Generated by CoffeeScript 2.0.0-beta6
void function () {
  var $cache, axilla, cacheTemplate, Mustache, Path;
  Path = require('path');
  Mustache = require('mustache');
  $cache = {
    layouts: {},
    partials: {},
    templates: {}
  };
  module.exports = axilla = function (basePath, defaults) {
    if (utils.isObject(basePath)) {
      defaults = basePath;
      basePath = null;
    }
    return function (path, viewObject, options) {
      if (!utils.isEmpty(basePath))
        path = Path.normalize('' + basePath + Path.sep + path);
      return render(path, viewObject, utils.defaults(options, defaults));
    };
  };
  axilla.configure = function (path, options) {
    return glob.sync(Path.normalize('' + path + '/**/*.mustache')).forEach(function (file) {
      var opts, relativePath;
      relativePath = getTemplateReference(file, path);
      opts = utils.clone(options);
      if (opts.layouts === true)
        opts.cacheType = 'layouts';
      if (isPartial(Path.basename(file))) {
        opts.cacheType = 'partials';
        relativePath = removeUnderscore(relativePath);
      }
      return cacheTemplate(file, utils.extend(opts, { as: relativePath }));
    });
  };
  axilla.getTemplates = function () {
    var path, template, templateObject, templates, templateType;
    templates = {};
    for (templateType in $cache) {
      if (!isOwn$($cache, templateType))
        continue;
      templateObject = $cache[templateType];
      for (path in templateObject) {
        if (!isOwn$(templateObject, path))
          continue;
        template = templateObject[path];
        (function (templateType, path, template) {
          return (null != templates[templateType] ? templates[templateType] : templates[templateType] = {})[path] = template;
        }(templateType, path, template));
      }
    }
    return templates;
  };
  axilla.clearCache = function () {
    $cache = {
      layouts: {},
      partials: {},
      templates: {}
    };
  };
  cacheTemplate = function (path, options) {
    return $cache[null != options.cacheType ? options.cacheType : 'templates'][options.as] = { original: readFileSync(path) };
  };
  function isOwn$(o, p) {
    return {}.hasOwnProperty.call(o, p);
  }
}.call(this);
